{ "delay_event_campaign": "\"DELAY_EVENT_CUSTOMIZATION\": {\n        \"your_event_name\": {\"*::*::*\": \"2024-05-22\"}\n      }",
  "loyal_user_launches": "for _ in range(2):\n        if af_util.probability(15):\n            af.launch(app_spent_time=random.randint(5, 20))",
  "distribution": "rr = random.randint(1, 100)\nif rr<=30:\n    revenue = (2, 4)\nelif rr<=30:\n    revenue = (5, 9)\nelif rr<=30:\n    revenue = (10, 14)\nelse:\n     revenue = (15, 24)\nrevenue = random.randint(*revenue)\n",
  "flyer_registration": "if day<3 and not af.from_app(\"signup_success\") and af_util.probability(55):\n                af.inapps(event_name=\"af_complete_registration\", app_spent_time=random.randint(2*60, 4*60))\n                af.to_app(\"signup_success\", True)",
  "flyer_purchase": "event_value = OrderedDict([\n                (\"af_revenue\", 9.99),\n                (\"af_currency\", \"USD\")\n            ])\n            af.inapps(event_name=\"af_purchase\", event_value=event_value, app_spent_time=random.randint(4*60, 9*60))",
  "flyer_shopping_app_flow": "    # initializing user cart\n    af.to_app(\"user_cart\", af.from_app(\"user_cart\", []))\n\n\n    # product view\n    if af_util.probability(85):\n        af.inapps(event_name=\"af_content_view\", app_spent_time=random.randint(1*60, 3*60))\n\n        # add to cart\n        if af_util.probability(70):\n            prod = {\"1\": \"1\"}\n            af.inapps(event_name=\"af_add_to_cart\", app_spent_time=random.randint(1*60, 3*60))\n            af.from_app(\"user_cart\").append(prod)\n\n    # user sign up\n    if day < 3 and not af.from_app(\"signup_success\") and af_util.probability(55):\n        af.set_customer_user_id(str(uuid.uuid4()))\n        af.inapps(event_name=\"af_complete_registration\", app_spent_time=random.randint(2*60, 4*60))\n        af.to_app(\"signup_success\", True)\n        \n    # checkout initiated after adding product in cart\n    if af.from_app(\"signup_success\") and af.from_app(\"user_cart\") and af_util.probability(66):\n        af.inapps(event_name=\"af_initiated_checkout\", app_spent_time=random.randint(1*60, 3*60))\n\n        # finally proceeding for purchase\n        if af.purchase_done(day=1, probability=8):\n            order_id = af_util.random_string(\"all\", 20).upper()\n            revenue = sum(float(i.get(\"price\", random.randint(15, 80))) for i in af.from_app(\"user_cart\"))\n            event_value = OrderedDict([\n                                (\"af_revenue\", revenue),\n                                (\"af_currency\", \"USD\"),\n                                (\"af_order_id\", order_id)\n                            ])\n            af.inapps(event_name=\"af_purchase\", event_value=event_value, app_spent_time=random.randint(4*60, 9*60))\n\n            af.to_app(\"user_cart\", [])\n\n    for _ in range(2):\n        if af_util.probability(20):\n            af.launch(app_spent_time=random.randint(5, 20))",
  "sample flyer sdk event": "af.inapps(event_name=\"homepage view\", app_spent_time=random.randint(5,10))",
  "flyer new app": "# -*- coding: utf-8 -*-\nimport sys\nreload(sys)\nsys.setdefaultencoding('utf-8')\n\nfrom tracker.appsflyer.appsflyer_core import AppsflyerLibCore\nfrom tracker.appsflyer import generic_util as af_util\nfrom collections import OrderedDict\n##########################################################\n# \t\t\tCampaign Data : dictionary\t\t\t\t\t #\n#\t\t\t\t\t\t\t\t\t\t\t\t\t\t #\n# \tContains App's predefined strings like app versions, #\n# \tpackage name, sdk and retention information, etc\t #\n##########################################################\ncampaign_data = {\n    'script_version': 1,\n    'app_name': 'Pinata',\n    'package_name': 'com.pinatarenterapp',\n    'app_size': 20.0,\n    'app_version_name': '2.46.6',\n    'app_version_code': '24606',\n\n    'tracker': 'appsflyer',\n    'appsflyer': {\"buildnumber\": \"6.15.2\",\n                  \"dev_key\": \"4Mt2RysBeSJpumRsJwwnqG\",\n                  \"sig\": \"2868BAB37E1045A39BE48A0D055E007070A9C0843BBB246ACA9B2DCEFAB1DA1E\"},\n    'supported_os': '7.0',\n    'CREATE_DEVICE_MODE': 3,\n\n    'retention': {\n        1: 70, 2: 68, 3: 66, 4: 64, 5: 61, 6: 59, 7: 57, 8: 52, 9: 50, 10: 47, 11: 45, 12: 43, 13: 40, 14: 37, 15: 35,\n        16: 31, 17: 30, 18: 28, 19: 26, 20: 20, 21: 19, 22: 18, 23: 17, 24: 16, 25: 15, 26: 14, 27: 13, 28: 12, 29: 11, 30: 10,\n        31: 9, 32: 8, 33: 7, 34: 6, 35: 5,\n    },\n}\n\n\n#########################################################\n# \t\t\t\tinstall() : method\t\t\t\t\t\t#\n# \t\t\t\tparameter : app_data,device_data \t\t#\n# \t\t\t\t\t\t\t\t\t\t\t\t\t\t#\n# \tContains method calls to simulate App's behaviour\t#\n# \tWhen the App was opened for first time \t\t\t    #\n#########################################################\ndef install(app_data, device_data, day=0):\n    af = AppsflyerLibCore(campaign_data, app_data, device_data)\n    # af.set_platform_extension(\"android_reactNative\")\n    # af.set_host(\"6gsbye-\", \"appsflyersdk.com\")\n\n    af.start_tracking(response_listener=True)\n\n    # sdk event example app open\n    # af.inapps(event_name=\"event_renter_app_open\", app_spent_time=random.randint(20, 40))\n\n    for _ in range(2):\n        if af_util.probability(15):\n            af.launch(app_spent_time=random.randint(5, 20))\n\n    return {'status': 'true'}\n\n\n#########################################################\n# \t\t\t\topen() : method\t\t\t\t\t\t    #\n# \t\t\t\tparameter : app_data,device_data \t\t#\n# \t\t\t\t\t\t\t\t\t\t\t\t\t\t#\n# \tContains method calls to simulate App's behaviour\t#\n# \twhen the App was opened after first launch \t        #\n#########################################################\ndef open(app_data, device_data, day=1):\n    af = AppsflyerLibCore(campaign_data, app_data, device_data, day=day)\n    # af.set_platform_extension(\"android_reactNative\")\n    # af.set_host(\"6gsbye-\", \"appsflyersdk.com\")\n\n    af.start_tracking()\n\n    for _ in range(2):\n        if af_util.probability(15):\n            af.launch(app_spent_time=random.randint(5, 20))\n\n    return {'status': 'true'}",
  "metrica_shopping_flow": "app_data[\"user_cart\"] = app_data.get(\"user_cart\", [])\n\n    # open app\n    spent_time(5, 25)\n    event_data = [('open_app', {})]\n    metrica_ins.track_events(event_data)\n\n    # profile open\n    if day<3 and not app_data.get(\"signup_success\") and probability(92):\n        spent_time(15, 35)\n        event_data = [('profile_open', {})]\n        metrica_ins.track_events(event_data)\n\n        # profile auth or registration open\n        if probability(90):\n            spent_time(15, 35)\n            event_data = [('profile_auth_or_registration_open', {})]\n            metrica_ins.track_events(event_data)\n\n            # login\n            if probability(75):\n                spent_time(77, 110)\n                event_data = [('login', {})]\n                metrica_ins.track_events(event_data)\n\n                app_data[\"signup_success\"] = True\n\n\n    if app_data.get(\"signup_success\"):\n        # open product details\n        if probability(70):\n            prod = get_product() # example call\n            spent_time(55, 99)\n            event_data = [('open_product_details', {})]\n            metrica_ins.track_events(event_data)\n\n            # add to cart\n            if probability(70):\n                spent_time(66, 99)\n                event_data = [('add_to_cart', {'af_content_id': str(float(prod.get(\"prod_id\")))})]\n                metrica_ins.track_events(event_data)\n                app_data.get(\"user_cart\").append(prod)\n\n\n    # remove from cart\n    if app_data.get(\"user_cart\"):\n        # remove from cart\n        if probability(7):\n            spent_time(45, 99)\n            prod = app_data.get(\"user_cart\").pop(random.randint(0, len(app_data.get(\"user_cart\"))-1))\n            event_data = [('remove_from_cart', {'af_content_id': str(float(prod.get(\"prod_id\")))})]\n            metrica_ins.track_events(event_data)\n\n    # view cart and checkout activities\n    if app_data.get(\"user_cart\"):\n        # initiated checkout\n        if probability(60):\n            spent_time(55, 111)\n            content_id_list = []\n            quantity = []\n            total_revenue = 0\n\n            for i in app_data.get(\"user_cart\"):\n                content_id_list.append(str(i.get(\"prod_id\")))\n                quantity.append(\"1\")\n                total_revenue += float(i.get(\"prod_price\"))\n\n            order_id = get_order_id()\n            event_data = [('cart_press_create_order', {}),\n                          ('initiated_checkout',\n                           {'af_quantity': quantity,\n                            'af_currency': 'RUB',\n                            'af_order_id': order_id,\n                            'af_content_id': content_id_list,\n                            'af_price': '%.1f' % total_revenue})\n                          ]\n            metrica_ins.track_events(event_data)\n\n            # purchase\n            if day<5 and not app_data.get(\"purchase_done\") and probability(37):\n                spent_time(5*60, 9*60)\n                event_data = [('purchase', {'af_revenue': '%.1f' % total_revenue,\n                                            'af_order_id': order_id,\n                                            'af_country': 'Russia'}),\n                               ('cart_success_pay', {}),\n                              ]\n                metrica_ins.track_events(event_data)\n\n                event_data = [\n                    {\n                        \"orderId\": str(order_id),\n                        \"productId\": str(i.get('prod_id')),\n                        \"productName\": i.get(\"prod_name\"),\n                        \"currency\": \"RUB\",\n                        \"amount\": int(i.get(\"prod_price\")),\n                    } for i in app_data.get(\"user_cart\")\n                ]\n                metrica_ins.track_ecom_events(event_data, str(order_id))\n\n                event_data = [\n                    {\n                        \"currency\": \"RUB\",\n                        \"item_name\": i.get('prod_id'),\n                        \"order_data\": {\"OrderID\": order_id, \"source\": \"Google Play\"},\n                        \"item_price\": int(i.get('prod_price')) * 1000000,\n                    } for i in app_data.get(\"user_cart\")\n                ]\n                metrica_ins.track_revenue_events(event_data)\n\n                app_data[\"purchase_done\"] = True",


  "autofile_delaycustom_method": "def is_delay_event(app_data, event_name):\n    import datetime\n    if event_name not in campaign_data[\"DELAY_EVENT_CUSTOMIZATION\"]:\n        return False\n    for offer_details, customization_time in campaign_data[\"DELAY_EVENT_CUSTOMIZATION\"][event_name].items():\n        if offer_details.count(\"::\") != 2:\n            raise ValueError(\"Invalid Offer Details format\")\n\n        channel, network, offer = offer_details.split(\"::\")\n        network_match = network in [None, \"*\"] or str(app_data.get(\"network_name\", \"\")).lower() == str(network).lower()\n        channel_match = channel in [None, \"*\"] or str(app_data.get(\"channel\", \"\")).lower() == str(channel).lower()\n        offer_match = offer in [None, \"*\"] or app_data.get(\"offer_id\") == offer\n\n        if network_match and channel_match and offer_match:\n            click_time_customization = datetime.datetime.strptime(customization_time, \"%Y-%m-%d\")\n            click_time = datetime.datetime.utcfromtimestamp(app_data.get(\"times\", {}).get(\"click_time\", 0))\n            return click_time < click_time_customization\n\n    return False",

  "metrica_new_app": "# -*- coding: utf-8 -*-\nimport sys\n\nreload(sys)\nsys.setdefaultencoding('utf-8')\n\nimport random\nfrom sdk.appmetrica import Appmetrica\nimport time\n\n##########################################################\n#           Campaign Data : dictionary                   #\n#                                                        #\n#   Contains App's predefined strings like app versions, #\n#   package name, sdk and retention information, etc     #\n##########################################################\ncampaign_data = {\n    'app_name': 'Poison Drop',\n    'package_name': 'ru.poisondrop',\n    'app_size': 58.90,\n    'app_version_name': '1.24.1',\n    'app_version_code': '289',\n    'tracker': 'appmetrica',\n    'appmetrica': {\n        \"sdk_version_name\": \"5.3.0\",\n        \"sdk_version_code\": \"45003240\",\n        \"api_key\": \"98f0c7cd-61b3-4026-a5f4-d2da34fcc019\",\n    },\n    'supported_os': '8.0',\n    'CREATE_DEVICE_MODE': 3,\n    'retention': {\n        1: 70, 2: 68, 3: 66, 4: 64, 5: 61, 6: 59, 7: 57, 8: 52, 9: 50, 10: 47, 11: 45, 12: 43, 13: 40, 14: 37, 15: 35,\n        16: 31, 17: 30, 18: 28, 19: 26, 20: 20, 21: 19, 22: 18, 23: 17, 24: 16, 25: 15, 26: 14, 27: 13, 28: 12, 29: 11,\n        30: 10,\n        31: 9, 32: 8, 33: 7, 34: 6, 35: 5,\n    },\n}\n\n\n#########################################################\n#               install() : method                      #\n#               parameter : app_data,device_data        #\n#                                                       #\n#   Contains method calls to simulate App's behaviour   #\n#   When the App was opened for first time              #\n#########################################################\ndef install(app_data, device_data, day=0):\n    metrica_ins = Appmetrica(campaign_data, app_data, device_data, day=day)\n    if metrica_ins.is_fs_blacklist_ip():\n        return {'status': 'true'}\n\n    metrica_ins.start_tracking()\n\n    # event call example\n    # spent_time(5, 15)\n    # event_data = [('open_app', {})]\n    # metrica_ins.track_events(event_data)\n\n    return {'status': 'true'}\n\n\n#########################################################\n#               install() : method                      #\n#               parameter : app_data,device_data        #\n#                                                       #\n#   Contains method calls to simulate App's behaviour   #\n#   when the App was opened after first launch          #\n#########################################################\ndef open(app_data, device_data, day=1):\n    metrica_ins = Appmetrica(campaign_data, app_data, device_data, day=day)\n\n    metrica_ins.start_tracking()\n\n    return {'status': 'true'}\n\n\n###########################################################################################\ndef spent_time(min_seconds, max_seconds):\n    min_seconds, max_seconds = min(min_seconds, max_seconds), max(min_seconds, max_seconds)\n    time.sleep(random.randint(min_seconds, max_seconds))\n\n\ndef probability(max_prob):\n    return random.randint(1, 100) <= max_prob",
  "order_id_helper_campaign": "    \"order_id_helper\": [\n        {\"order_id\": 1083873, \"timestamp\": 1746085529},\n        {\"order_id\": 1083868, \"timestamp\": 1746085503},\n    ],",
  "order id helper method": "def get_order_id():\n    user_id_increase_per_second_list = []\n    for i in range(len(campaign_data.get('order_id_helper'))):\n        if i + 1 != len(campaign_data.get('order_id_helper')):\n            timestamp_diff = campaign_data.get('order_id_helper')[i].get('timestamp') - \\\n                             campaign_data.get('order_id_helper')[i + 1].get('timestamp')\n            user_id_diff = campaign_data.get('order_id_helper')[i].get('order_id') - campaign_data.get('order_id_helper')[\n                i + 1].get('order_id')\n\n            user_id_increase_per_second = float(user_id_diff) / float(timestamp_diff)\n            user_id_increase_per_second_list.append(user_id_increase_per_second)\n\n    current_time = time.time()\n    last_ordered_item = campaign_data.get('order_id_helper')[0]\n    time_diff = current_time - last_ordered_item.get('timestamp')\n    avg_ord_id_increase = (sum(user_id_increase_per_second_list) / len(user_id_increase_per_second_list))\n    order_id = (time_diff * avg_ord_id_increase) + last_ordered_item.get('order_id')\n\n    return str(int(order_id))",

  "geo customization": "'GEO_TARGET_CUSTOMIZATIONS': {\n      \"*::*::*\": [\"dubai\", \"abu_dhabi\"]\n     }",
  "proxy customization": "'PROXY_PROVIDER_CUSTOMIZATIONS': {\"*::*::*\": [\"oxylabs\"]}, # or luminati",
  "restricted cities custom": "'RESTRICTED_CITIES': [\"new_york\"]",
  "app inactivity custom": "'APP_INACTIVTY_CUSTOMIZATIONS': {\n    \"saudiarabia\": {\"*::*::*\": {\"from\": 21, \"to\": 9},\n                    \"#channel::network_name::offer_id\": {\"from\": -1, \"to\": -1}  # for disabling TZ\n                    }},",
  "currency converter api": "def get_conversion_value(source_currency=\"USD\", target_currency=\"INR\"):\n    from sdk import util\n\n    exchange_value = 1\n    url = \"http://adj-services.appanalytics.in/rd/scripting/get-exchange-rate\"\n    params = {\"sourceCurrency\": source_currency, \"targetCurrency\": target_currency, \"key\": \"46aee21b4ab04691b34d912013498cd0\"}\n    resp = util.execute_request(**{'url': url, 'httpmethod': \"get\", 'headers': {}, 'params': params, 'data': None})\n    try:\n        exchange_value = json.loads(resp.get(\"data\")).get(\"data\").get(\"sourceToTargetExchangeRate\")\n        print exchange_value\n    except:\n        pass\n    print exchange_value, type(exchange_value)\n    return exchange_value",
  "time and probability utils": "###########################################################################################\ndef spent_time(min_seconds, max_seconds):\n    min_seconds, max_seconds = min(min_seconds, max_seconds), max(min_seconds, max_seconds)\n    time.sleep(random.randint(min_seconds, max_seconds))\n\n\ndef probability(max_prob):\n    return random.randint(1, 100) <= max_prob",

  "text translator": "def translate_text(text, src, dest):\n    import requests\n    try:\n        response = requests.get(\"https://translate.googleapis.com/translate_a/single?client=gtx&dt=t\", params={\"sl\": src,\"tl\": dest, \"q\": text})\n        response.raise_for_status()\n        result = response.json()\n        return result[0][0][0]\n    except Exception as e:\n        return \"Error: {}\".format(e)\n\n# # Example usage\n# text = \"\\320\\243\\321\\201\\320\\277\\320\\265\\321\\210\\320\\275\\320\\260\\321\\217 \\320\\277\\320\\276\\320\\264\\320\\277\\320\\270\\321\\201\\320\\272\\320\\260\"\n# translated_text = translate_text(text, \"ru\", \"en\")\n# print(translated_text)\n# print text",

  "db data save method": "def save_tmp_data(af):\n    import requests, json\n    from sdk import apiserv\n    try:\n        camp = __file__.rsplit(\"/\", 1)[1].split(\".\", 1)[0]\n    except:\n        camp = campaign_data.get('package_name')\n    try:\n        conv_status = (af.get_attribution_data() or {}).get('af_status', '').replace(\" \", \"_\").lower() or 'error'\n        ip_country = ''\n        try:\n            response = requests.get(url=\"http://lumtest.com/echo.json\")\n            if response.status_code == 200 and response.json():\n                resp_json = response.json()\n                print(resp_json)\n                ip_country = resp_json.get('country') or ''\n        except:\n            pass\n        ip_address = ''\n        try:\n            ip_address = requests.get(url='https://api.ipify.org/', verify=False).text\n        except:\n            pass\n        apiserv.saveCallParameters(\n            agentId='customConv', package_name=camp, tracker=campaign_data.get('tracker'), device_data={},\n            payload={\n                'method': 'post',\n                'url': \"http://\" + conv_status,\n                'headers': af.app.get('channel'),\n                'params': \"{}::{}::{}\".format(af.app.get('channel'), af.app.get('network_name'),\n                                              af.app.get('offer_id')),\n                'data': json.dumps({\n                    'adid': af.device.get('adid'),\n                    'mcc': af.device.get('mcc'),\n                    'mnc': af.device.get('mnc'),\n                    'carrier': af.device.get('carrier'),\n                    'operator': af.device.get('operator', af.device.get('carrier')),\n                    'brand': af.device.get('brand'),\n                    'model': af.device.get('model'),\n                    'os_version': af.device.get('os_version'),\n                    'sdk': af.device.get('sdk'),\n                    \"lang\": af.device_lang_name(),\n                    \"lang_code\": af.device_lang_code(),\n                    \"country\": af.device_country(),\n                    \"ip_country\": ip_country,\n                    \"conv_status\": conv_status,\n                    \"app_version\": campaign_data.get('app_version_name'),\n                    \"appsflyer_id\": af.appsflyer_uid(),\n                    \"ip_address\": ip_address,\n                    \"script_version\": campaign_data.get('script_version', 0)\n                })})\n    except:\n        pass",
  "data save method call": "    if app_data.get(\"channel\"):\n        save_tmp_data(af)",
  "nov device config for camp": "    'TESTING_DEVICE_CONFIG_NOV': {\n        \"OS_DISTRIBUTION\": [\"14\"] * 40 + [\"13\"] * 30 + [\"12\"] * 20 + [\"11\"] * 10\n    }",
  "adjust revenue currency": "u_data = {\n              \"revenue\": \"%.5f\" % revenue,\n              \"currency\": \"USD\",\n              }",
  "country check method": "def is_valid_country(af):\n    if not af.from_app(\"offer_id\"):\n        return \"true\"\n    ################################################################################################################################\n    country = None\n    _country = 'in'\n    for _ in range(3):\n        try:\n            resp = af.execute_request(url=\"http://geo.brdtest.com/mygeo.json\", httpmethod='get', headers={}, params={},\n                                      data={})\n            if resp and resp.get('data'):\n                print resp.get('data')\n                resp = json.loads(resp.get('data'))\n                country = resp.get('country')\n        except:\n            pass\n        if country and str(_country).lower() == str(country).lower():\n            return str(country).upper()\n        else:\n            return False\n    return False",
  "country check method call": "    if app_data.get(\"channel\"):\n        if not is_valid_country(af):\n            return {'status': 'false'}",
  "p360 method call": "if app_data.get(\"channel\"):\n        if DevicePatch.is_device_blocked(device_data, af.device_country().upper(), af.device_lang_code()):\n            return {'status': 'false'}"
}
