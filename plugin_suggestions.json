{ "delay_event_campaign": "\"DELAY_EVENT_CUSTOMIZATION\": {\n        \"your_event_name\": {\"*::*::*\": \"2024-05-22\"}\n      }",
  "loyal_user_launches": "for _ in range(2):\n        if af_util.probability(15):\n            af.launch(app_spent_time=random.randint(5, 20))",
  "distribution": "rr = random.randint(1, 100)\nif rr<=30:\n    revenue = (2, 4)\nelif rr<=30:\n    revenue = (5, 9)\nelif rr<=30:\n    revenue = (10, 14)\nelse:\n     revenue = (15, 24)\nrevenue = random.randint(*revenue)\n",
  "flyer_registration": "if day<3 and not af.from_app(\"signup_success\") and af_util.probability(55):\n                af.inapps(event_name=\"af_complete_registration\", app_spent_time=random.randint(2*60, 4*60))\n                af.to_app(\"signup_success\", True)",
  "flyer_purchase": "event_value = OrderedDict([\n                (\"af_revenue\", 9.99),\n                (\"af_currency\", \"USD\")\n            ])\n            af.inapps(event_name=\"af_purchase\", event_value=event_value, app_spent_time=random.randint(4*60, 9*60))",
  "flyer_shopping_app_flow": "    # initializing user cart\n    af.to_app(\"user_cart\", af.from_app(\"user_cart\", []))\n\n\n    # product view\n    if af_util.probability(85):\n        af.inapps(event_name=\"af_content_view\", app_spent_time=random.randint(1*60, 3*60))\n\n        # add to cart\n        if af_util.probability(70):\n            prod = {\"1\": \"1\"}\n            af.inapps(event_name=\"af_add_to_cart\", app_spent_time=random.randint(1*60, 3*60))\n            af.from_app(\"user_cart\").append(prod)\n\n    # user sign up\n    if day < 3 and not af.from_app(\"signup_success\") and af_util.probability(55):\n        af.set_customer_user_id(str(uuid.uuid4()))\n        af.inapps(event_name=\"af_complete_registration\", app_spent_time=random.randint(2*60, 4*60))\n        af.to_app(\"signup_success\", True)\n        \n    # checkout initiated after adding product in cart\n    if af.from_app(\"signup_success\") and af.from_app(\"user_cart\") and af_util.probability(66):\n        af.inapps(event_name=\"af_initiated_checkout\", app_spent_time=random.randint(1*60, 3*60))\n\n        # finally proceeding for purchase\n        if af.purchase_done(day=1, probability=8):\n            order_id = af_util.random_string(\"all\", 20).upper()\n            revenue = sum(float(i.get(\"price\", random.randint(15, 80))) for i in af.from_app(\"user_cart\"))\n            event_value = OrderedDict([\n                                (\"af_revenue\", revenue),\n                                (\"af_currency\", \"USD\"),\n                                (\"af_order_id\", order_id)\n                            ])\n            af.inapps(event_name=\"af_purchase\", event_value=event_value, app_spent_time=random.randint(4*60, 9*60))\n\n            af.to_app(\"user_cart\", [])\n\n    for _ in range(2):\n        if af_util.probability(20):\n            af.launch(app_spent_time=random.randint(5, 20))",
  "sample flyer sdk event": "af.inapps(event_name=\"homepage view\", app_spent_time=random.randint(5,10))",
  "flyer new app android": "# -*- coding: utf-8 -*-\nimport sys\nreload(sys)\nsys.setdefaultencoding('utf-8')\n\nfrom tracker.appsflyer.appsflyer_core import AppsflyerLibCore\nfrom tracker.appsflyer import generic_util as af_util\nimport random\n\n##########################################################\n# \t\t\tCampaign Data : dictionary\t\t\t\t\t #\n#\t\t\t\t\t\t\t\t\t\t\t\t\t\t #\n# \tContains App's predefined strings like app versions, #\n# \tpackage name, sdk and retention information, etc\t #\n##########################################################\ncampaign_data = {\n    'script_version': 1,\n    'app_name': 'Pinata',\n    'package_name': 'com.pinatarenterapp',\n    'app_size': 20.0,\n    'app_version_name': '2.46.6',\n    'app_version_code': '24606',\n\n    'tracker': 'appsflyer',\n    'appsflyer': {\"buildnumber\": \"6.15.2\",\n                  \"dev_key\": \"4Mt2RysBeSJpumRsJwwnqG\",\n                  \"sig\": \"2868BAB37E1045A39BE48A0D055E007070A9C0843BBB246ACA9B2DCEFAB1DA1E\"},\n    'supported_os': '7.0',\n    'CREATE_DEVICE_MODE': 3,\n\n    'retention': {\n        1: 70, 2: 68, 3: 66, 4: 64, 5: 61, 6: 59, 7: 57, 8: 52, 9: 50, 10: 47, 11: 45, 12: 43, 13: 40, 14: 37, 15: 35,\n        16: 31, 17: 30, 18: 28, 19: 26, 20: 20, 21: 19, 22: 18, 23: 17, 24: 16, 25: 15, 26: 14, 27: 13, 28: 12, 29: 11, 30: 10,\n        31: 9, 32: 8, 33: 7, 34: 6, 35: 5,\n    },\n}\n\n\n#########################################################\n# \t\t\t\tinstall() : method\t\t\t\t\t\t#\n# \t\t\t\tparameter : app_data,device_data \t\t#\n# \t\t\t\t\t\t\t\t\t\t\t\t\t\t#\n# \tContains method calls to simulate App's behaviour\t#\n# \tWhen the App was opened for first time \t\t\t    #\n#########################################################\ndef install(app_data, device_data, day=0):\n    af = AppsflyerLibCore(campaign_data, app_data, device_data)\n    # af.set_platform_extension(\"android_reactNative\")\n    # af.set_host(\"6gsbye-\", \"appsflyersdk.com\")\n\n    af.start_tracking(response_listener=True)\n\n    # sdk event example app open\n    # af.inapps(event_name=\"event_renter_app_open\", app_spent_time=random.randint(20, 40))\n\n    for _ in range(2):\n        if af_util.probability(15):\n            af.launch(app_spent_time=random.randint(5, 20))\n\n    return {'status': 'true'}\n\n\n#########################################################\n# \t\t\t\topen() : method\t\t\t\t\t\t    #\n# \t\t\t\tparameter : app_data,device_data \t\t#\n# \t\t\t\t\t\t\t\t\t\t\t\t\t\t#\n# \tContains method calls to simulate App's behaviour\t#\n# \twhen the App was opened after first launch \t        #\n#########################################################\ndef open(app_data, device_data, day=1):\n    af = AppsflyerLibCore(campaign_data, app_data, device_data, day=day)\n    # af.set_platform_extension(\"android_reactNative\")\n    # af.set_host(\"6gsbye-\", \"appsflyersdk.com\")\n\n    af.start_tracking()\n\n    for _ in range(2):\n        if af_util.probability(15):\n            af.launch(app_spent_time=random.randint(5, 20))\n\n    return {'status': 'true'}",
  "metrica_shopping_flow": "app_data[\"user_cart\"] = app_data.get(\"user_cart\", [])\n\n    # open app\n    spent_time(5, 25)\n    event_data = [('open_app', {})]\n    metrica_ins.track_events(event_data)\n\n    # profile open\n    if day<3 and not app_data.get(\"signup_success\") and probability(92):\n        spent_time(15, 35)\n        event_data = [('profile_open', {})]\n        metrica_ins.track_events(event_data)\n\n        # profile auth or registration open\n        if probability(90):\n            spent_time(15, 35)\n            event_data = [('profile_auth_or_registration_open', {})]\n            metrica_ins.track_events(event_data)\n\n            # login\n            if probability(75):\n                spent_time(77, 110)\n                event_data = [('login', {})]\n                metrica_ins.track_events(event_data)\n\n                app_data[\"signup_success\"] = True\n\n\n    if app_data.get(\"signup_success\"):\n        # open product details\n        if probability(70):\n            prod = get_product() # example call\n            spent_time(55, 99)\n            event_data = [('open_product_details', {})]\n            metrica_ins.track_events(event_data)\n\n            # add to cart\n            if probability(70):\n                spent_time(66, 99)\n                event_data = [('add_to_cart', {'af_content_id': str(float(prod.get(\"prod_id\")))})]\n                metrica_ins.track_events(event_data)\n                app_data.get(\"user_cart\").append(prod)\n\n\n    # remove from cart\n    if app_data.get(\"user_cart\"):\n        # remove from cart\n        if probability(7):\n            spent_time(45, 99)\n            prod = app_data.get(\"user_cart\").pop(random.randint(0, len(app_data.get(\"user_cart\"))-1))\n            event_data = [('remove_from_cart', {'af_content_id': str(float(prod.get(\"prod_id\")))})]\n            metrica_ins.track_events(event_data)\n\n    # view cart and checkout activities\n    if app_data.get(\"user_cart\"):\n        # initiated checkout\n        if probability(60):\n            spent_time(55, 111)\n            content_id_list = []\n            quantity = []\n            total_revenue = 0\n\n            for i in app_data.get(\"user_cart\"):\n                content_id_list.append(str(i.get(\"prod_id\")))\n                quantity.append(\"1\")\n                total_revenue += float(i.get(\"prod_price\"))\n\n            order_id = get_order_id()\n            event_data = [('cart_press_create_order', {}),\n                          ('initiated_checkout',\n                           {'af_quantity': quantity,\n                            'af_currency': 'RUB',\n                            'af_order_id': order_id,\n                            'af_content_id': content_id_list,\n                            'af_price': '%.1f' % total_revenue})\n                          ]\n            metrica_ins.track_events(event_data)\n\n            # purchase\n            if day<5 and not app_data.get(\"purchase_done\") and probability(37):\n                spent_time(5*60, 9*60)\n                event_data = [('purchase', {'af_revenue': '%.1f' % total_revenue,\n                                            'af_order_id': order_id,\n                                            'af_country': 'Russia'}),\n                               ('cart_success_pay', {}),\n                              ]\n                metrica_ins.track_events(event_data)\n\n                event_data = [\n                    {\n                        \"orderId\": str(order_id),\n                        \"productId\": str(i.get('prod_id')),\n                        \"productName\": i.get(\"prod_name\"),\n                        \"currency\": \"RUB\",\n                        \"amount\": int(i.get(\"prod_price\")),\n                    } for i in app_data.get(\"user_cart\")\n                ]\n                metrica_ins.track_ecom_events(event_data, str(order_id))\n\n                event_data = [\n                    {\n                        \"currency\": \"RUB\",\n                        \"item_name\": i.get('prod_id'),\n                        \"order_data\": {\"OrderID\": order_id, \"source\": \"Google Play\"},\n                        \"item_price\": int(i.get('prod_price')) * 1000000,\n                    } for i in app_data.get(\"user_cart\")\n                ]\n                metrica_ins.track_revenue_events(event_data)\n\n                app_data[\"purchase_done\"] = True",


  "autofile_delaycustom_method": "def is_delay_event(app_data, event_name):\n    import datetime\n    if event_name not in campaign_data[\"DELAY_EVENT_CUSTOMIZATION\"]:\n        return False\n    for offer_details, customization_time in campaign_data[\"DELAY_EVENT_CUSTOMIZATION\"][event_name].items():\n        if offer_details.count(\"::\") != 2:\n            raise ValueError(\"Invalid Offer Details format\")\n\n        channel, network, offer = offer_details.split(\"::\")\n        network_match = network in [None, \"*\"] or str(app_data.get(\"network_name\", \"\")).lower() == str(network).lower()\n        channel_match = channel in [None, \"*\"] or str(app_data.get(\"channel\", \"\")).lower() == str(channel).lower()\n        offer_match = offer in [None, \"*\"] or app_data.get(\"offer_id\") == offer\n\n        if network_match and channel_match and offer_match:\n            click_time_customization = datetime.datetime.strptime(customization_time, \"%Y-%m-%d\")\n            click_time = datetime.datetime.utcfromtimestamp(app_data.get(\"times\", {}).get(\"click_time\", 0))\n            return click_time < click_time_customization\n\n    return False",
  "metrica_new_app": "# -*- coding: utf-8 -*-\nimport sys\n\nreload(sys)\nsys.setdefaultencoding('utf-8')\n\nimport random\nfrom sdk.appmetrica import Appmetrica\nimport time\n\n##########################################################\n#           Campaign Data : dictionary                   #\n#                                                        #\n#   Contains App's predefined strings like app versions, #\n#   package name, sdk and retention information, etc     #\n##########################################################\ncampaign_data = {\n    'app_name': 'Poison Drop',\n    'package_name': 'ru.poisondrop',\n    'app_size': 58.90,\n    'app_version_name': '1.24.1',\n    'app_version_code': '289',\n    'tracker': 'appmetrica',\n    'appmetrica': {\n        \"sdk_version_name\": \"5.3.0\",\n        \"sdk_version_code\": \"45003240\",\n        \"api_key\": \"98f0c7cd-61b3-4026-a5f4-d2da34fcc019\",\n    },\n    'supported_os': '8.0',\n    'CREATE_DEVICE_MODE': 3,\n    'retention': {\n        1: 70, 2: 68, 3: 66, 4: 64, 5: 61, 6: 59, 7: 57, 8: 52, 9: 50, 10: 47, 11: 45, 12: 43, 13: 40, 14: 37, 15: 35,\n        16: 31, 17: 30, 18: 28, 19: 26, 20: 20, 21: 19, 22: 18, 23: 17, 24: 16, 25: 15, 26: 14, 27: 13, 28: 12, 29: 11,\n        30: 10,\n        31: 9, 32: 8, 33: 7, 34: 6, 35: 5,\n    },\n}\n\n\n#########################################################\n#               install() : method                      #\n#               parameter : app_data,device_data        #\n#                                                       #\n#   Contains method calls to simulate App's behaviour   #\n#   When the App was opened for first time              #\n#########################################################\ndef install(app_data, device_data, day=0):\n    metrica_ins = Appmetrica(campaign_data, app_data, device_data, day=day)\n    if metrica_ins.is_fs_blacklist_ip():\n        return {'status': 'true'}\n\n    metrica_ins.start_tracking()\n\n    # event call example\n    # spent_time(5, 15)\n    # event_data = [('open_app', {})]\n    # metrica_ins.track_events(event_data)\n\n    return {'status': 'true'}\n\n\n#########################################################\n#               install() : method                      #\n#               parameter : app_data,device_data        #\n#                                                       #\n#   Contains method calls to simulate App's behaviour   #\n#   when the App was opened after first launch          #\n#########################################################\ndef open(app_data, device_data, day=1):\n    metrica_ins = Appmetrica(campaign_data, app_data, device_data, day=day)\n\n    metrica_ins.start_tracking()\n\n    return {'status': 'true'}\n\n\n###########################################################################################\ndef spent_time(min_seconds, max_seconds):\n    min_seconds, max_seconds = min(min_seconds, max_seconds), max(min_seconds, max_seconds)\n    time.sleep(random.randint(min_seconds, max_seconds))\n\n\ndef probability(max_prob):\n    return random.randint(1, 100) <= max_prob",

  "orderid_helper_campaign": "    \"order_id_helper\": [\n        {\"order_id\": 1083873, \"timestamp\": 1746085529},\n        {\"order_id\": 1083868, \"timestamp\": 1746085503},\n    ],",
  "orderid helper method": "def get_order_id():\n    user_id_increase_per_second_list = []\n    for i in range(len(campaign_data.get('order_id_helper'))):\n        if i + 1 != len(campaign_data.get('order_id_helper')):\n            timestamp_diff = campaign_data.get('order_id_helper')[i].get('timestamp') - \\\n                             campaign_data.get('order_id_helper')[i + 1].get('timestamp')\n            user_id_diff = campaign_data.get('order_id_helper')[i].get('order_id') - campaign_data.get('order_id_helper')[\n                i + 1].get('order_id')\n\n            user_id_increase_per_second = float(user_id_diff) / float(timestamp_diff)\n            user_id_increase_per_second_list.append(user_id_increase_per_second)\n\n    current_time = time.time()\n    last_ordered_item = campaign_data.get('order_id_helper')[0]\n    time_diff = current_time - last_ordered_item.get('timestamp')\n    avg_ord_id_increase = (sum(user_id_increase_per_second_list) / len(user_id_increase_per_second_list))\n    order_id = (time_diff * avg_ord_id_increase) + last_ordered_item.get('order_id')\n\n    return str(int(order_id))",
  "userid_helper_campaign": "\"user_id_helper\": [\n        {\"user_id\": 108902575, \"timestamp\": 1744612630},\n        {\"user_id\": 107428459, \"timestamp\": 1743421026},\n    ],",
  "userid_helper method": "def get_user_id():\n    user_id_increase_per_second_list = []\n    for i in range(len(campaign_data.get('user_id_helper'))):\n        if i + 1 != len(campaign_data.get('user_id_helper')):\n            timestamp_diff = campaign_data.get('user_id_helper')[i].get('timestamp') - \\\n                             campaign_data.get('user_id_helper')[i + 1].get('timestamp')\n            user_id_diff = campaign_data.get('user_id_helper')[i].get('user_id') - campaign_data.get('user_id_helper')[\n                i + 1].get('user_id')\n\n            user_id_increase_per_second = float(user_id_diff) / float(timestamp_diff)\n            user_id_increase_per_second_list.append(user_id_increase_per_second)\n\n    current_time = time.time()\n    last_ordered_item = campaign_data.get('user_id_helper')[0]\n    time_diff = current_time - last_ordered_item.get('timestamp')\n    avg_ord_id_increase = (sum(user_id_increase_per_second_list) / len(user_id_increase_per_second_list))\n    user_id = (time_diff * avg_ord_id_increase) + last_ordered_item.get('user_id')\n\n    return str(int(user_id))",

  "geo customization": "'GEO_TARGET_CUSTOMIZATIONS': {\n      \"*::*::*\": [\"dubai\", \"abu_dhabi\"]\n     }",
  "proxy customization": "'PROXY_PROVIDER_CUSTOMIZATIONS': {\"*::*::*\": [\"oxylabs\"]}, # or luminati",
  "restricted cities custom": "'RESTRICTED_CITIES': [\"new_york\"]",
  "app inactivity custom": "'APP_INACTIVTY_CUSTOMIZATIONS': {\n    \"saudiarabia\": {\"*::*::*\": {\"from\": 21, \"to\": 9},\n                    \"#channel::network_name::offer_id\": {\"from\": -1, \"to\": -1}  # for disabling TZ\n                    }},",
  "currency converter api": "def get_conversion_value(source_currency=\"USD\", target_currency=\"INR\"):\n    from sdk import util\n\n    exchange_value = 1\n    url = \"http://adj-services.appanalytics.in/rd/scripting/get-exchange-rate\"\n    params = {\"sourceCurrency\": source_currency, \"targetCurrency\": target_currency, \"key\": \"46aee21b4ab04691b34d912013498cd0\"}\n    resp = util.execute_request(**{'url': url, 'httpmethod': \"get\", 'headers': {}, 'params': params, 'data': None})\n    try:\n        exchange_value = json.loads(resp.get(\"data\")).get(\"data\").get(\"sourceToTargetExchangeRate\")\n        print exchange_value\n    except:\n        pass\n    print exchange_value, type(exchange_value)\n    return exchange_value",
  "time and probability utils": "###########################################################################################\ndef spent_time(min_seconds, max_seconds):\n    min_seconds, max_seconds = min(min_seconds, max_seconds), max(min_seconds, max_seconds)\n    time.sleep(random.randint(min_seconds, max_seconds))\n\n\ndef probability(max_prob):\n    return random.randint(1, 100) <= max_prob",

  "text translator": "def translate_text(text, src, dest):\n    import requests\n    try:\n        response = requests.get(\"https://translate.googleapis.com/translate_a/single?client=gtx&dt=t\", params={\"sl\": src,\"tl\": dest, \"q\": text})\n        response.raise_for_status()\n        result = response.json()\n        return result[0][0][0]\n    except Exception as e:\n        return \"Error: {}\".format(e)\n\n# # Example usage\n# text = \"\\320\\243\\321\\201\\320\\277\\320\\265\\321\\210\\320\\275\\320\\260\\321\\217 \\320\\277\\320\\276\\320\\264\\320\\277\\320\\270\\321\\201\\320\\272\\320\\260\"\n# translated_text = translate_text(text, \"ru\", \"en\")\n# print(translated_text)\n# print text",

  "db data save method": "def save_tmp_data(af):\n    import requests, json\n    from sdk import apiserv\n    try:\n        camp = __file__.rsplit(\"/\", 1)[1].split(\".\", 1)[0]\n    except:\n        camp = campaign_data.get('package_name')\n    try:\n        conv_status = (af.get_attribution_data() or {}).get('af_status', '').replace(\" \", \"_\").lower() or 'error'\n        ip_country = ''\n        try:\n            response = requests.get(url=\"http://lumtest.com/echo.json\")\n            if response.status_code == 200 and response.json():\n                resp_json = response.json()\n                print(resp_json)\n                ip_country = resp_json.get('country') or ''\n        except:\n            pass\n        ip_address = ''\n        try:\n            ip_address = requests.get(url='https://api.ipify.org/', verify=False).text\n        except:\n            pass\n        apiserv.saveCallParameters(\n            agentId='customConv', package_name=camp, tracker=campaign_data.get('tracker'), device_data={},\n            payload={\n                'method': 'post',\n                'url': \"http://\" + conv_status,\n                'headers': af.app.get('channel'),\n                'params': \"{}::{}::{}\".format(af.app.get('channel'), af.app.get('network_name'),\n                                              af.app.get('offer_id')),\n                'data': json.dumps({\n                    'adid': af.device.get('adid'),\n                    'mcc': af.device.get('mcc'),\n                    'mnc': af.device.get('mnc'),\n                    'carrier': af.device.get('carrier'),\n                    'operator': af.device.get('operator', af.device.get('carrier')),\n                    'brand': af.device.get('brand'),\n                    'model': af.device.get('model'),\n                    'os_version': af.device.get('os_version'),\n                    'sdk': af.device.get('sdk'),\n                    \"lang\": af.device_lang_name(),\n                    \"lang_code\": af.device_lang_code(),\n                    \"country\": af.device_country(),\n                    \"ip_country\": ip_country,\n                    \"conv_status\": conv_status,\n                    \"app_version\": campaign_data.get('app_version_name'),\n                    \"appsflyer_id\": af.appsflyer_uid(),\n                    \"ip_address\": ip_address,\n                    \"script_version\": campaign_data.get('script_version', 0)\n                })})\n    except:\n        pass",
  "data save method call": "if app_data.get(\"channel\"):\n        save_tmp_data(af)",
  "nov device config for camp": "    'TESTING_DEVICE_CONFIG_NOV': {\n        \"OS_DISTRIBUTION\": [\"14\"] * 40 + [\"13\"] * 30 + [\"12\"] * 20 + [\"11\"] * 10\n    }",

  "adjust new app android": "# -*- coding: utf-8 -*-\nimport sys\nreload(sys)\nsys.setdefaultencoding('utf-8')\n\nfrom sdk.adjust_v1 import AdjustConfig\nfrom sdk import util\nimport time, json, random\n##########################################################\n# \t\t\tCampaign Data : dictionary\t\t\t\t\t #\n#\t\t\t\t\t\t\t\t\t\t\t\t\t\t #\n# \tContains App's predefined strings like app versions, #\n# \tpackage name, sdk and retention information, etc\t #\n##########################################################\ncampaign_data = {\n    'script_version': 2,\n    'app_name': 'PlayroomPro - Random VoiceCall',\n    'package_name': 'com.playroom.pro',\n    'app_size': 20.0,\n    'app_version_name': '2.8.9',\n    'app_version_code': '289',\n\n    'tracker': 'adjust',\n    'adjust': {\"app_token\": \"kikkw9wozw8w\", \"sdk\": \"android5.2.0\"},\n\n    'supported_os': '7.0',\n\n    'retention': {\n        1: 70, 2: 68, 3: 66, 4: 64, 5: 61, 6: 59, 7: 57, 8: 52, 9: 50, 10: 47, 11: 45, 12: 43, 13: 40, 14: 37, 15: 35,\n        16: 31, 17: 30, 18: 28, 19: 26, 20: 20, 21: 19, 22: 18, 23: 17, 24: 16, 25: 15, 26: 14, 27: 13, 28: 12, 29: 11, 30: 10,\n        31: 9, 32: 8, 33: 7, 34: 6, 35: 5,\n    },\n}\n\n\n#########################################################\n# \t\t\t\tinstall() : method\t\t\t\t\t\t#\n# \t\t\t\tparameter : app_data,device_data \t\t#\n# \t\t\t\t\t\t\t\t\t\t\t\t\t\t#\n# \tContains method calls to simulate App's behaviour\t#\n# \tWhen the App was opened for first time \t\t\t    #\n#########################################################\ndef install(app_data, device_data, day=0):\n    adjust_ins = AdjustConfig(campaign_data, app_data, device_data)\n\n    resp = adjust_ins.adjust_session(t1=0, t2=2)\n    app_data['api_hit_time'] = time.time()\n    attr_init_by = \"sdk\"\n    try:\n        if json.loads(resp.get('data')).get('ask_in'):\n            attr_init_by = \"backend\"\n    except:\n        pass\n\n    adjust_ins.adjust_sdk_click(t1=0, t2=2, source=\"install_referrer\")\n\n    adjust_ins.adjust_attribution(init_by=attr_init_by, t1=0, t2=2)\n\n    # example event\n    # ins.adjust_event(token=\"aaaaaa\", u_data=u_data, t1=0, t2=1, event_meaning=\"\")\n\n    return {'status': 'true'}\n\n\n#########################################################\n# \t\t\t\topen() : method\t\t\t\t\t\t    #\n# \t\t\t\tparameter : app_data,device_data \t\t#\n# \t\t\t\t\t\t\t\t\t\t\t\t\t\t#\n# \tContains method calls to simulate App's behaviour\t#\n# \twhen the App was opened after first launch \t        #\n#########################################################\ndef open(app_data, device_data, day=1):\n    adjust_ins = AdjustConfig(campaign_data, app_data, device_data, day=day)\n\n    resp = adjust_ins.adjust_session(t1=1, t2=3)\n\n    return {'status': 'true'}\n\n###########################################################################################\ndef spent_time(min_seconds, max_seconds):\n    min_seconds, max_seconds = min(min_seconds, max_seconds), max(min_seconds, max_seconds)\n    time.sleep(random.randint(min_seconds, max_seconds))\n\n\ndef probability(max_prob):\n    return random.randint(1, 100) <= max_prob",
  "adjust revenue currency": "u_data = {\n              \"revenue\": \"%.5f\" % revenue,\n              \"currency\": \"USD\",\n              }",
  "ip country check method": "def is_valid_country(af):\n    if not af.from_app(\"channel\"):\n        return \"true\"\n    ################################################################################################################################\n    country = None\n    for _ in range(2):\n        try:\n            resp = af.execute_request(url=\"http://geo.brdtest.com/mygeo.json\", httpmethod='get', headers={}, params={},\n                                      data={})\n            if resp and resp.get('data'):\n                resp = json.loads(resp.get('data'))\n                country = resp.get('country')\n        except:\n            pass\n        if country and af.device_country().lower() == str(country).lower():\n            return str(country).upper()\n    return False",
  "ip country check method call": "    if not is_valid_country(af):\n        return {'status': 'false'}",
  "city check method": "def check_and_connect_proxy(af, update_proxy=True):\n    import json, random\n    if not af.from_app(\"offer_id\"):\n        return \"true\"\n\n    offer_details = '{}::{}::{}'.format(af.from_app(\"channel\"), af.from_app(\"network_name\"),\n                                        af.from_app(\"offer_id\")).lower()\n    _country = 'us'\n    if offer_details in {\"mobpine::strongmetrics::fanatic-sports-strongmetrics\"}:\n        _city_list = campaign_data[\"GEO_TARGET_CUSTOMIZATIONS\"][offer_details]\n    else:\n        _city_list = campaign_data[\"GEO_TARGET_CUSTOMIZATIONS\"][\"*::*::*\"]\n\n    ################################################################################################################################\n    country = None\n    region = None\n    city = None\n    for _ in range(3):\n        try:\n            resp = af.execute_request(url=\"http://geo.brdtest.com/mygeo.json\", httpmethod='get', headers={}, params={},\n                                      data={})\n            if resp and resp.get('data'):\n                print resp.get('data')\n                resp = json.loads(resp.get('data'))\n                country = resp.get('country')\n                region = resp.get('geo').get('region')\n                city = resp.get('geo').get('city')\n        except:\n            pass\n        if country and str(_country).lower() == str(country).lower() and city and str(city).upper() in _city_list:\n            return str(region).upper()\n        elif update_proxy:\n            ProxyHelper.revert()\n            ProxyHelper.set_city_target(_country, random.choice(_city_list), af.day)\n        else:\n            return False\n    return False",
  "city check in retention call": "check_and_connect_proxy(af, update_proxy=True) and ",
  "p360 method call": "if app_data.get(\"channel\"):\n        if DevicePatch.is_device_blocked(device_data, af.device_country().upper(), af.device_lang_code()):\n            return {'status': 'false'}",
  "mailsac util": "resp_text = af_util.get_email_messages(_email=_email, _sender=None, _identifier=\"ypemodd\")",
  "set python2 encoding": "# -*- coding: utf-8 -*-\n",
  "date_format method": "def format_date(_format=\"%Y-%m-%d %H:%M:%S.%f\", timestamp=None, timezone=\"+0000\"):\n    \"\"\" If you add %z if format then it will add timezone in format e.g. \"+00:00\" \"\"\"\n    timezone = int(timezone)\n    sec = int(abs(timezone) / 100) * 3600 + int(abs(timezone) % 100) * 60\n    sec = (-1) * sec if timezone < 0 else sec\n    if timestamp is None:\n        timestamp = time.time()\n    if isinstance(timestamp, (int, long)) and len(str(timestamp)) == 13:\n        timestamp = timestamp / 1000.0\n    if timezone != \"+0000\":\n        timestamp += sec\n    if \"%Z\" in _format:\n        _format = _format.replace(\"%Z\", \"{0}\".format(timezone))\n    if \"%z\" in _format:\n        _format = _format.replace(\"%z\", \"{0}:{1}\".format(timezone[:3], timezone[3:]))\n    if \"%f\" in _format:\n        _f_val = datetime.datetime.utcfromtimestamp(timestamp).strftime(\"%f\")[:3]\n        _format = _format.replace(\"%f\", \"{0}\".format(_f_val))\n    if \"%F\" in _format:\n        _format = _format.replace(\"%F\", \"%f\")\n    return datetime.datetime.utcfromtimestamp(timestamp).strftime(_format)",
  "flyer standard events": "['af_invite', 'af_complete_registration', 'af_share',\n 'af_rate', 'af_re_engage', 'af_add_payment_info',\n 'af_login', 'af_level_achieved', 'af_start_trial',\n 'af_ad_click', 'af_add_to_wishlist', 'af_subscribe', 'af_opened_from_push_notification', 'af_initiated_checkout', 'af_tutorial_completion', 'af_list_view', 'af_ad_view', 'af_location_coordinates', 'af_achievement_unlocked', 'af_customer_segment', 'af_content_view', 'af_search', 'af_update', 'af_spent_credits', 'af_travel_booking', 'af_location_changed', 'af_add_to_cart', 'af_purchase', 'af_order_id']",
  "offer_details_combination": "offer_details = '{}::{}::{}'.format(app_data.get(\"channel\"), app_data.get(\"network_name\"), app_data.get(\"offer_id\")).lower()",
  "custom landig page": "'CLICKER_CUSTOM_LANDINGPAGE': [\n        'm.fomo7.com:443/app-download',\n    ],",
  "flyer ip logger": "def log_ip_to_flyer(device_data):\n    import requests\n    import json\n    from tracker.appsflyer.utility_classes import Random\n    from tracker.appsflyer.network_util import AppsflyerEventRequest\n    from tracker.appsflyer.generic_util import format_date\n    from tracker.appsflyer.devicehelper import UserAgent\n    from tracker.appsflyer.appsflyer_v5 import AppsflyerLibCoreV5\n\n    url = \"http://m23tpk-conversions.appsflyersdk.com/api/v6.14/androidevent\"\n    headers = {\n        \"Accept-Encoding\": \"gzip\",\n        \"Connection\": \"Keep-Alive\",\n        \"Content-Type\": \"application/octet-stream\",\n        \"User-Agent\": UserAgent.dalvik_agent(device_data)\n    }\n    params = {\"app_id\": \"com.videodo.statusdownload\", \"buildnumber\": \"6.14.2\"}\n    firstLaunchDate = format_date(\"%Y-%m-%d_%H%M%S%Z\")\n    date2 = format_date(\"%Y-%m-%d_%H%M%S%Z\", timezone=device_data.get(\"timezone\"))\n    install_date = format_date(\"%Y-%m-%d_%H%M%S%Z\")\n\n    dm = device_data.get(\"display_metrics\")\n    xpx = int(dm.get('xpx'))\n    ypx = int(dm.get('ypx'))\n    if xpx > ypx:\n        xpx, ypx = ypx, xpx\n    data = {\n        \"platform_extension_v2\": {\"platform\": \"android_flutter\", \"version\": \"6.14.2\"},\n        \"uid\": str(int(time.time() * 1000)) + \"-\" + str(abs(Random().next_long())),\n        \"appsflyerKey\": \"vEbzV4hdsUG5GpQYLeXsHS\",\n        \"is_pc\": False,\n        \"timepassedsincelastlaunch\": \"-1\",\n        \"installer_package\": \"com.android.vending\",\n        \"operator\": \"\",\n        \"referrers\": [{\n            \"latency\": 99,\n            \"api_ver\": 84652000,\n            \"source\": \"google\",\n            \"google_custom\": {\"instant\": False},\n            \"referrer\": \"utm_source=(not%20set)&utm_medium=(not%20set)\",\n            \"api_ver_name\": \"46.5.20-23 [0] [PR] 765318715\",\n            \"type\": \"store\",\n            \"response\": \"OK\"\n        }],\n        \"disk\": \"82843187423/258884960706\",\n        \"open_referrer\": \"android-app://com.android.vending\",\n        \"af_preinstalled\": \"false\",\n        \"date2\": date2,\n        \"targetSDKver\": 34,\n        \"network\": \"MOBILE\",\n        \"installDate\": install_date,\n        \"af_events_api\": \"1\",\n        \"ivc\": False,\n        \"cell\": {\"mnc\": 0, \"mcc\": 0},\n        \"GAID_retry\": \"false\",\n        \"cksm_v3\": \"f5a140cb6c23451e\",\n        \"deviceType\": \"user\",\n        \"app_version_code\": \"5\",\n        \"batteryLevel\": \"20.0\",\n        \"brand\": device_data.get(\"brand\"),\n        \"product\": device_data.get(\"product\"),\n        \"isGaidWithGps\": \"true\",\n        \"registeredUninstall\": False,\n        \"app_version_name\": \"1.0.5.123\",\n        \"platformextension\": \"android_flutter\",\n        \"device\": device_data.get(\"device\"),\n        \"lang_code\": \"en\",\n        \"last_boot_time\": 1749464296201,\n        \"sdk\": str(device_data.get(\"sdk\")),\n        \"lang\": \"English\",\n        \"rfr\": {\"code\": \"0\", \"instant\": False, \"val\": \"utm_source=(not%20set)&utm_medium=(not%20set)\"},\n        \"tokenRefreshConfigured\": False,\n        \"deviceData\": {\n            \"dim\": {\n                \"x_px\": str(xpx),\n                \"xdp\": format(float(dm.get(\"xdp\")), \".3f\"),\n                \"y_px\": str(ypx),\n                \"d_dpi\": str(device_data.get(\"dpi\")),\n                \"ydp\": format(float(dm.get(\"ydp\")), \".3f\"),\n                \"size\": str(dm.get('screen_layout_size'))\n            },\n            \"cpu_abi2\": \"\",\n            \"btch\": \"ac\",\n            \"cpu_abi\": \"\",\n            \"build_display_id\": device_data.get(\"display\"),\n            \"btl\": \"20.0\",\n            \"sensors\": [],\n            \"arch\": \"\"\n        },\n        \"firstLaunchDate\": firstLaunchDate,\n        \"country\": \"\",\n        \"counter\": \"1\",\n        \"advertiserId\": \"\",\n        \"carrier\": \"\",\n        \"isFirstCall\": \"true\",\n        \"sig\": \"1497EFCE9D45162159CC177CAC8C1A763F11A636C43E5EC1700CA6E204B4F55E\",\n        \"advertiserIdEnabled\": \"true\",\n        \"model\": device_data.get(\"model\"),\n        \"af_timestamp\": str(int(time.time() * 1000)),\n        \"iaecounter\": \"0\"\n    }\n    _kef_key = AppsflyerLibCoreV5.kef_key(data.get(\"af_timestamp\"), data.get('sdk'), data.get('brand'))\n    _kef_val = AppsflyerLibCoreV5.kef_val(\n        len(data), data.get(\"af_timestamp\"), firstLaunchDate, params.get(\"buildnumber\"),\n        random.randint(295, 350),\n        random.randint(35, 45)\n    )\n    data[_kef_key] = _kef_val\n    try:\n        requests.post(url, headers=headers, params=params, data=AppsflyerEventRequest.encrypt_data(data))\n    except:\n        pass",
  "future date formatter": "def get_future_date(_format=\"%Y-%m-%d\", timestamp=time.time(), timezone=\"+0000\", days=0, months=0, years=0, hours=0, minutes=0):\n    def get_sec(timezone_):\n        timezone_ = int(timezone_)\n        sec = int(abs(timezone_) / 100) * 3600 + int(abs(timezone_) % 100) * 60\n        return (-1) * sec if timezone_ < 0 else sec\n\n    if timezone != \"+0000\":\n        timestamp += get_sec(timezone)\n\n    if \"%Z\" in _format:\n        _format = _format.replace(\"%Z\", \"{0}\".format(timezone))\n    if \"%z\" in _format:\n        _format = _format.replace(\"%z\", \"{0}:{1}\".format(timezone[:3], timezone[3:]))\n    if \"%f\" in _format:\n        _f_val = datetime.datetime.utcfromtimestamp(timestamp).strftime(\"%f\")[:3]\n        _format = _format.replace(\"%f\", \"{0}\".format(_f_val))\n    if \"%F\" in _format:\n        _format = _format.replace(\"%F\", \"%f\")\n    today = datetime.datetime.utcfromtimestamp(timestamp)\n    for i in range(months):\n        y = (today.month + i) // 12\n        month = (today.month + i) % 12\n        days = days + calendar.monthrange(today.year + y, month)[1]\n    today = datetime.datetime(\n        today.year + years, today.month,\n        today.day, today.hour, today.minute, today.second, today.microsecond, today.tzinfo\n    ) + datetime.timedelta(days=days, hours=hours, minutes=minutes)\n    return today.strftime(_format)",
  "attribution tracker method": "def track_attribution(af):\n    import requests, json, os\n    camp = os.path.splitext(os.path.basename(__file__))[0] if '__file__' in globals() else campaign_data.get('package_name')\n    conv_status = (af.get_attribution_data() or {}).get('af_status', '').replace(\" \", \"_\").lower() or 'error'\n    ip_country = ''\n    try:\n        resp = requests.get(\"http://lumtest.com/echo.json\", timeout=2)\n        ip_country = resp.json().get('country', '') if resp.ok else ''\n    except:\n        pass\n    try:\n        payload = {\n            \"campName\": camp, \"gaid\": af.device.get('adid'), \"tracker\": \"appsflyer\",\n            \"channel\": af.app.get('channel'), \"network\": af.app.get('network_name'), \"offer\": af.app.get('offer_id'),\n            \"deviceCountry\": af.device_country(), \"ipCountry\": ip_country, \"data\": json.dumps({}),\n            \"convStatus\": conv_status, \"mcc\": af.device.get('mcc'), \"mnc\": af.device.get('mnc'),\n            \"carrier\": af.device.get('carrier'), \"operator\": af.device.get('operator'), \"brand\": af.device.get('brand'),\n            \"model\": af.device.get('model'), \"osVersion\": af.device.get('os_version'), \"lang\": af.device_lang_name(),\n            \"langCode\": af.device_lang_code(), \"sdk\": af.device.get('sdk'), \"appVersion\": campaign_data.get('app_version_name'),\n            \"appsflyerId\": af.appsflyer_uid(), \"scriptVersion\": campaign_data.get('script_version', 0)}\n        requests.post(\"https://adj-services.appanalytics.in/report/analysis/track-attribution/\",\n                      headers={\"Content-Type\": \"application/json\"}, data=json.dumps(payload), proxies={'https': None, 'http': None}, timeout=10)\n    except:\n        pass",
  "attribution tracker method call": "    if app_data.get(\"channel\"):\n        track_attribution(af)",
  "moengage android module": "class Moengage:\n    def __init__(self, campaign_data, app_data, device_data):\n        self.app = app_data\n        self.device = device_data\n        self.campaign = campaign_data\n        self.session_id = str(uuid.uuid4()).lower()\n        self.start_time = self.format_time()\n        self.app_key = self.campaign.get('moengage').get('app_key')\n        self.base_url = self.campaign.get('moengage').get('url', 'https://sdk-03.moengage.com')\n\n        # Generate unique IDs if they don't exist\n        self.app.setdefault('unique_id', str(uuid.uuid4()).lower())\n        self.app.setdefault('drm_id', util.get_random_string('hex', 64))\n        self.app.setdefault('push_id', \"{}:APA91b{}\".format(\n            util.get_random_string('google_token', 22), util.get_random_string('google_token', 134)))\n\n        # Initialize Moengage session data\n        self.app = {\n            'moengage_start_time': time.time(),\n            'moengage_session_id': self.session_id\n        }\n\n        # INITIALIZING SDK CONFIGURATIONS\n        self.sdkconfig()\n\n    def sdkconfig(self):\n        data = json.dumps({\"query_params\": self.get_query_params()})\n        util.execute_request(url=self.get_url(\"v3/sdkconfig/android/{}\".format(self.app_key)), httpmethod=\"post\", headers=self.get_headers(), params=None, data=data)\n\n    def track_campaign(self):\n        params = {\n                \"device_type\": \"MOBILE\",\n                \"inapp_ver\": self.campaign.get('moengage').get('inapp_ver'),\n                \"os\": \"ANDROID\",\n                \"push_opt_in_status\": \"false\",\n                \"sdk_ver\": self.campaign.get('moengage').get('sdk_ver'),\n                \"unique_id\": self.app.get('unique_id'),\n            }\n        data = json.dumps({\"query_params\": self.get_query_params(add_moe_gaid=True)})\n        util.execute_request(url=self.get_url(\"v3/campaigns/inapp/live\"), httpmethod=\"post\", headers=self.get_headers(), params=params, data=data)\n\n    def track_devicesdk(self):\n        data = {\n            \"DENSITYDPI\": int(self.device.get('dpi', 0)),\n            \"DEVICE\": self.device.get('device', ''),\n            \"HEIGHT\": int(self.device.get('display_metrics', {}).get('ypx', 0)),\n            \"MANUFACTURER\": self.device.get('manufacturer', ''),\n            \"meta\": {\n                \"bid\": \"{}-{}\".format(int(time.time() * 1000), str(uuid.uuid4())),\n                \"dev_pref\": {\"e_t_p\": True},\n                \"request_time\": self.format_time()\n            },\n            \"MODEL\": self.device.get('model', ''),\n            \"MOE_GAID\": self.device.get('adid', ''),\n            \"MOE_ISLAT\": 0,\n            \"OS_API_LEVEL\": int(self.device.get('sdk', 0)),\n            \"OS_VERSION\": self.device.get('os_version', ''),\n            \"PRODUCT\": self.device.get('product', ''),\n            \"WIDTH\": int(self.device.get('display_metrics', {}).get('xpx', 0))\n        }\n        query_params = self.get_query_params()\n        query_params.update({\n            \"device_tz\": self.device.get('local_tz_name', ''),\n            \"manufacturer\": self.device.get('manufacturer', ''),\n            \"model\": self.device.get('model', ''),\n            \"moe_drm_id\": self.app.get('drm_id'),\n            \"moe_gaid\": self.device.get('adid', ''),\n            \"networkType\": self.device.get('network', ''),\n            \"os_ver\": self.device.get('sdk', ''),\n            \"push_id\": self.app.get('push_id'),\n        })\n        data['query_params'] = query_params\n        data['meta'].update(self.app.get(\"meta_data\", {}))\n        util.execute_request(url=self.get_url(\"v2/sdk/device/{}\".format(self.app_key)), httpmethod=\"post\",\n                             headers=self.get_headers(add_request_id=True), params=None, data=json.dumps(data))\n\n    def report_event(self, event_list=None):\n        data = {\n            \"meta\": {\n                \"bid\": \"{}-{}\".format(int(time.time() * 1000), uuid.uuid4()),\n                \"request_time\": self.format_time(),\n                \"session\": {\n                    \"session_id\": self.session_id,\n                    \"start_time\": self.start_time\n                },\n                \"source\": []\n            },\n            \"identifiers\": {}\n        }\n        query_params = self.get_query_params()\n        query_params.update({\n            \"device_tz\": self.device.get('local_tz_name', ''),\n            \"manufacturer\": self.device.get('manufacturer', ''),\n            \"model\": self.device.get('model', ''),\n            \"moe_drm_id\": self.app.get('drm_id'),\n            \"networkType\": self.device.get('network', ''),\n            \"os_ver\": self.device.get('sdk', ''),\n            \"push_id\": self.app.get('push_id'),\n        })\n        data[\"query_params\"] = query_params\n        if isinstance(event_list, list):\n            event_views_list = []\n            for event in event_list:\n                event_info = {\"EVENT_ACTION\": event.get('event_name', ''), \"EVENT_G_TIME\": str(int(time.time() * 1000)),\n                              \"EVENT_L_TIME\": self.format_time(_format='%d:%m:%Y:%H:%M:%S')\n                             }\n                if 'event_data' in event:\n                    event_info[\"EVENT_ATTRS\"] = json.dumps(event.get('event_data', {}), separators=(',', ':'))\n                if 'custom_event_data' in event:\n                    event_info[\"EVENT_ATTRS_CUST\"] = json.dumps(event.get('custom_event_data', {}), separators=(',', ':'))\n                event_views_list.append(event_info)\n\n            data['viewsInfo'] = event_views_list\n            data[\"viewsCount\"] = len(event_views_list)\n\n        data['identifiers'].update(self.app.get(\"identifier\", {}))\n        data['meta'].update(self.app.get(\"meta_data\", {}))\n        if self.get_customer_user_id():\n            data['identifiers'].update({\"moe_user_id\": self.get_customer_user_id()})\n        util.execute_request(url=self.get_url(\"v2/sdk/report/{}\".format(self.app_key)), httpmethod=\"post\",\n                             headers=self.get_headers(add_request_id=True), params=None, data=json.dumps(data))\n\n    def get_headers(self, add_request_id=False):\n        headers= {\n                \"Accept-Encoding\": \"gzip\",\n                \"Accept-Charset\": \"UTF-8\",\n                \"User-Agent\": \"Dalvik/2.1.0 (Linux; U; Android {}; {} Build/{})\".format(\n                    self.device.get('os_version', ''), self.device.get('model', ''), self.device.get('build', '')\n                ),\n                \"Content-type\": 'application/json',\n                \"MOE-APPKEY\": self.app_key\n                }\n        if add_request_id:\n            headers['MOE-REQUEST-ID'] = util.get_random_string('hex', 40).upper()\n        return headers\n    def get_query_params(self, add_moe_gaid=False):\n        query_params = {\n            \"app_id\": self.app_key,\n            \"app_ver\": self.campaign.get('app_version_code', ''),\n            \"app_version_name\": self.campaign.get('app_version_name', ''),\n            \"device_ts\": str(int(time.time() * 1000)),\n            \"device_tz_offset\": self.tz_offset(),\n            \"moe_push_ser\": \"FCM\",\n            \"os\": \"ANDROID\",\n            \"sdk_ver\": self.campaign.get('moengage').get('sdk_ver'),\n            \"unique_id\": self.app.get('unique_id'),\n        }\n        if add_moe_gaid:\n            query_params[\"moe_gaid\"] = self.device.get('adid', '')\n        return query_params\n    def get_url(self, address):\n        return \"{}/{}\".format(self.base_url, address)\n    def set_meta_data(self, data):\n        self.app['meta_data'] = data\n    def set_identifier(self, identifier):\n        self.app['identifier'] = identifier\n    def set_customer_user_id(self, user_id):\n        self.app['moe_user_id'] = user_id\n    def get_customer_user_id(self):\n        return self.app.get('moe_user_id')\n    def tz_offset(self):\n        timez = self.device.get('timezone')\n        millisec = (abs(int(timez)) / 100) * 3600000 + (abs(int(timez)) % 100) * 60000\n        return str(millisec)\n    def format_time(self, _format=\"%Y-%m-%dT%H:%M:%S.%fZ\", timestamp=None, timezone=\"+0000\"):\n        timezone_ = int(timezone)\n        sec = int(abs(timezone_) / 100) * 3600 + int(abs(timezone_) % 100) * 60\n        sec = -sec if timezone_ < 0 else sec\n        if timestamp is None:\n            timestamp = time.time()\n        if isinstance(timestamp, (int, long)) and len(str(timestamp)) == 13:\n            timestamp /= 1000.0\n        if timezone != \"+0000\":\n            timestamp += sec\n        if \"%Z\" in _format:\n            _format = _format.replace(\"%Z\", str(timezone))\n        if \"%z\" in _format:\n            _format = _format.replace(\"%z\", \"{}:{}\".format(timezone[:3], timezone[3:]))\n        if \"%f\" in _format:\n            _format = _format.replace(\"%f\", datetime.datetime.utcfromtimestamp(timestamp).strftime(\"%f\")[:3])\n        return datetime.datetime.utcfromtimestamp(timestamp).strftime(_format)\n",
  "moengage campaign dict": "\"moengage\": {\n        'app_key': \"ATP85GRZ6S7Y4UTLE0CQYVQD\",\n        'sdk_ver': \"130300\",\n        'inapp_ver': '8.4.0',\n        'url': 'https://sdk-03.moengage.com'\n    },",
  "moengage instance call": "    mo_ins = Moengage(campaign_data, app_data, device_data)\n"
}
    